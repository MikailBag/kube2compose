---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: builtin-apiserver
spec:
  podSelector:
    matchLabels:
      app: apiserver
  policyTypes:
    - Ingress
  ingress:
  - from:
    - podSelector: {}
---
# Source: jjs/templates/network-policy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: builtin-invoker
spec:
  podSelector:
    matchLabels:
      app: invoker
  policyTypes:
  - Ingress
  ingress: []

#
---
# Source: jjs/templates/network-policy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: builtin-init-deny-ingress
spec:
  podSelector:
    matchLabels:
      app: init
  policyTypes:
  - Ingress
  ingress: []

#

#
---
# Source: jjs/templates/invoker.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: invoker
---
# Source: jjs/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: jjs-config
data:
  judge: |
    workers: 4
    problems:
      mongodb: mongodb://mongodb/jjs
---
# Source: jjs/templates/init.yaml
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: init
data:
  auth_data: |
    endpoint: http://apiserver:1779/
    auth:
      byToken:
        token: Dev::root
  setup: |
    set -e
    cp /cmap/auth_data /auth/authdata.yaml

  waiter: |
    set -e 
    bash /cmap/setup
    echo "Waiting for apiserver"
    jjs-cli wait
    touch /shared/ok
  wait_init_done: |
    set -e
    bash /cmap/setup
    while [ ! -f /shared/ok ] ;
    do
      sleep 2
    done
  init_toolchains: |
    set -e
    bash /cmap/wait_init_done
    echo "Installing toolchains"
    jjs-cli toolchains --name gcc --image gcr.io/jjs-dev/toolchain-gcc
    jjs-cli toolchains --name gcc-cpp --image gcr.io/jjs-dev/toolchain-gcc-cpp
    jjs-cli toolchains --name python3 --image gcr.io/jjs-dev/toolchain-python3
    
  init_problems: |
    set -e
    apt-get update
    apt-get install -y wget unzip cmake gcc g++
    bash /cmap/wait_init_done
    echo "Downloading latest problems"
    wget https://github.com/jjs-dev/samples/archive/master.zip -O /tmp/problems.zip
    unzip /tmp/problems.zip -d .
    cd samples-master/problems
    mkdir /shared/problems
    for problem_name in * ; do
      echo "compiling problem $problem_name"
      mkdir /shared/problems/$problem_name
      jjs-ppc compile --pkg $problem_name --out /shared/problems/$problem_name
    done
    touch /shared/problems_compiled
  
  upload_problems: |
    bash /cmap/setup
    echo "waiting until problems are compiled"
    while [ ! -f /shared/problems_compiled ] ;
    do
      sleep 5
    done
    cd /shared/problems
    for problem_name in * ; do
      echo "uploading problem $problem_name"
      jjs-cli problems --pkg ./$problem_name
    done
---
# Source: jjs/templates/invoker.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: invoker
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get"]
---
# Source: jjs/templates/invoker.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: invoker
subjects:
  - kind: ServiceAccount
    name: invoker
    apiGroup: ""
roleRef:
  kind: Role
  name: invoker
  apiGroup: rbac.authorization.k8s.io
---
# Source: jjs/templates/apiserver.yaml
apiVersion: v1
kind: Service
metadata:
  name: apiserver
spec:
  type: NodePort
  ports:
    - port: 1779
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: apiserver
---
# Source: jjs/templates/invoker.yaml
apiVersion: v1
kind: Service
metadata:
  name: invoker
spec:
  type: ClusterIP
  ports:
    - port: 1789
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: invoker
---
# Source: jjs/templates/apiserver.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apiserver
  labels:
    app: apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apiserver
  template:
    metadata:
      labels:
        app: apiserver
    spec:
      containers:
        - name: apiserver
          image: "apiserver:latest"
          imagePullPolicy: Never
          securityContext:
            readOnlyRootFilesystem: true
            runAsUser: 10779
            runAsGroup: 10779
          ports:
            - name: http
              containerPort: 1779
              protocol: TCP
          env:
            - name: MONGODB_CONNECTION_STRING
              value: mongodb://mongodb/jjs
          readinessProbe:
            httpGet:
              # TODO: implement ready
              # path: /ready
              path: /system/api-version
              port: http
---
# Source: jjs/templates/invoker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: invoker
  labels:
    app: invoker
#
spec:
  replicas: 1
  selector:
    matchLabels:
      app: invoker
  template:
    metadata:
      labels:
        app: invoker
    spec:
      serviceAccountName: invoker
      containers:
        - name: invoker
          env: 
            - name: RUST_LOG
              value: info,invoker=trace,problem_loader=trace,puller=trace
            - name: JJS_AUTH_DATA_INLINE
              value: '{"endpoint": "http://apiserver:1779/", "auth": {"byToken": {"token": "Dev::root"}}}'
          image: "invoker:latest"
          imagePullPolicy: Never
          securityContext: 
            privileged: true
          ports:
            - name: http
              containerPort: 1789
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http
---
# Source: jjs/templates/init.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: init
#
spec:
  backoffLimit: 3
  template:
    metadata:
      labels:
        app: init
    spec:
      volumes:
        - name: cmap
          configMap:
            name: init
        - name: shared
          emptyDir: {}
      containers:
        - name: waiter
          image: "toolkit:latest"
          imagePullPolicy: "Never"
          volumeMounts: 
            - name: cmap
              mountPath: /cmap
            - name: shared
              mountPath: /shared
          command: ["/bin/bash", "/cmap/waiter"]
        - name: toolchains
          image: "toolkit:latest"
          imagePullPolicy: Never
          volumeMounts:
            - name: cmap
              mountPath: /cmap
            - name: shared
              mountPath: /shared
          command: ["/bin/bash", "/cmap/init_toolchains"]
        - name: problems
          image: "toolkit:latest"
          imagePullPolicy: Never
          volumeMounts:
            - name: cmap
              mountPath: /cmap
            - name: shared
              mountPath: /shared
          command: ["/bin/bash", "/cmap/init_problems"]
        - name: problems-upload
          image: "toolkit:latest"
          imagePullPolicy: Never
          volumeMounts:
            - name: cmap
              mountPath: /cmap
            - name: shared
              mountPath: /shared
          command: ["/bin/bash", "/cmap/upload_problems"]
      restartPolicy: Never
#
